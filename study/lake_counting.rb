lake = [
  ['W', '.', '.', '.', '.', '.', '.', '.', '.', 'W', 'W', '.'],
  ['.', 'W', 'W', 'W', '.', '.', '.', '.', '.', 'W', 'W', 'W'],
  ['.', '.', '.', '.', 'W', 'W', '.', '.', '.', 'W', 'W', '.'],
  ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'W', 'W', '.'],
  ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'W', '.', '.'],
  ['.', '.', 'W', '.', '.', '.', '.', '.', '.', 'W', '.', '.'],
  ['.', 'W', '.', 'W', '.', '.', '.', '.', '.', 'W', 'W', '.'],
  ['W', '.', 'W', '.', 'W', '.', '.', '.', '.', '.', 'W', '.'],
  ['.', 'W', '.', 'W', '.', '.', '.', '.', '.', '.', 'W', '.'],
  ['.', '.', 'W', '.', '.', '.', '.', '.', '.', '.', 'W', '.']
]

def solve(lake)
  n = gets.to_i
  m = gets.to_i
  res = 0
  (0..n - 1).each do |o|
    (0..m - 1).each do |p|
      if lake[n][m] == 'W'
        lake_counting_dsf(lake, o, p)
        res += 1
      end
    end
  end
end

def lake_counting_dsf(lake, n, m)
  lake[n][m] == '.'

  (-1..1).each do |x|
    (-1..1).each do |y|
      nx = n + x
      my = m + y

      if 0 <= nx && nx < n && 0 <= my && my < m && lake[nx][my] == 'W'
        lake_counting_dsf(lake, nx, my)
      end
    end
  end
end